// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Modal Snapshot Snapshot of Modal for add book use 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Modal)>
    <Modal
      addBook={[Function]}
      addExchange={[Function]}
      addRequest={[Function]}
      btnuse="addbook"
      closeBook={[Function]}
      email={null}
      getUsersLocation={[Function]}
      info={
        Object {
          "authors": Array [],
          "bookId": "",
          "categories": Array [],
          "description": "",
          "imageUrl": "",
          "ownBy": Array [],
          "publishedDate": "",
          "publisher": "",
          "title": "",
        }
      }
      open={true}
      outrequests={Array []}
      ownedbooks={Array []}
      ownerslocation={Array []}
      removeBook={[Function]}
      tologin={false}
      username={null}
    >
      <Modal
        ariaHideApp={false}
        bodyOpenClassName="ReactModal__Body--open"
        closeTimeoutMS={0}
        contentLabel="Review Modal"
        isOpen={true}
        parentSelector={[Function]}
        portalClassName="ReactModalPortal"
        shouldCloseOnEsc={true}
        shouldCloseOnOverlayClick={true}
        shouldFocusAfterRender={true}
        shouldReturnFocusAfterClose={true}
        style={
          Object {
            "overlay": Object {
              "zIndex": 10,
            },
          }
        }
      >
        <ModalPortal
          ariaHideApp={false}
          bodyOpenClassName="ReactModal__Body--open"
          closeTimeoutMS={0}
          contentLabel="Review Modal"
          defaultStyles={
            Object {
              "content": Object {
                "WebkitOverflowScrolling": "touch",
                "background": "#fff",
                "border": "1px solid #ccc",
                "borderRadius": "4px",
                "bottom": "40px",
                "left": "40px",
                "outline": "none",
                "overflow": "auto",
                "padding": "20px",
                "position": "absolute",
                "right": "40px",
                "top": "40px",
              },
              "overlay": Object {
                "backgroundColor": "rgba(255, 255, 255, 0.75)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
              },
            }
          }
          isOpen={true}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
          style={
            Object {
              "overlay": Object {
                "zIndex": 10,
              },
            }
          }
        >
          <div
            aria-modal="true"
            className="ReactModal__Overlay ReactModal__Overlay--after-open"
            onClick={[Function]}
            onMouseDown={[Function]}
            style={
              Object {
                "backgroundColor": "rgba(255, 255, 255, 0.75)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
                "zIndex": 10,
              }
            }
          >
            <div
              aria-label="Review Modal"
              className="ReactModal__Content ReactModal__Content--after-open"
              onClick={[Function]}
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              style={
                Object {
                  "WebkitOverflowScrolling": "touch",
                  "background": "#fff",
                  "border": "1px solid #ccc",
                  "borderRadius": "4px",
                  "bottom": "40px",
                  "left": "40px",
                  "outline": "none",
                  "overflow": "auto",
                  "padding": "20px",
                  "position": "absolute",
                  "right": "40px",
                  "top": "40px",
                }
              }
              tabIndex="-1"
            >
              <i
                className="fas fa-times"
                onClick={[Function]}
                style={
                  Object {
                    "cursor": "pointer",
                    "float": "right",
                  }
                }
              />
              <Connect(Alert)>
                <Alert
                  closeAlert={[Function]}
                  open={true}
                >
                  <div>
                    <div
                      className="alert alert-warning alert-dismissible fade show"
                      role="alert"
                    >
                      <strong>
                        Oops! Something went wrong!
                      </strong>
                       The action just failed. Please try again later.
                      <button
                        aria-label="Close"
                        className="close"
                        data-dismiss="alert"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          aria-hidden="true"
                        >
                          Ã—
                        </span>
                      </button>
                    </div>
                  </div>
                </Alert>
              </Connect(Alert)>
              <h3 />
              <dl>
                <dt>
                  <img
                    alt=""
                    className="img-thumbnail"
                    src=""
                  />
                </dt>
                <div>
                  <dt>
                    Author
                  </dt>
                  <dd />
                </div>
                <dt>
                  Publisher
                </dt>
                <dd />
                <dt>
                  Published
                </dt>
                <dd />
                <dd />
              </dl>
              <button
                className="btn btn-raised bg-dark text-light"
                onClick={[Function]}
              >
                Add to my books
              </button>
            </div>
          </div>
        </ModalPortal>
      </Modal>
    </Modal>
  </Connect(Modal)>
</Provider>
`;

exports[`Modal Snapshot Snapshot of Modal for add request use 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Modal)>
    <Modal
      addBook={[Function]}
      addExchange={[Function]}
      addRequest={[Function]}
      btnuse="addrequest"
      closeBook={[Function]}
      email={null}
      getUsersLocation={[Function]}
      info={
        Object {
          "authors": Array [],
          "bookId": "",
          "categories": Array [],
          "description": "",
          "imageUrl": "",
          "ownBy": Array [],
          "publishedDate": "",
          "publisher": "",
          "title": "",
        }
      }
      open={true}
      outrequests={Array []}
      ownedbooks={Array []}
      ownerslocation={Array []}
      removeBook={[Function]}
      tologin={false}
      username={null}
    >
      <Modal
        ariaHideApp={false}
        bodyOpenClassName="ReactModal__Body--open"
        closeTimeoutMS={0}
        contentLabel="Review Modal"
        isOpen={true}
        parentSelector={[Function]}
        portalClassName="ReactModalPortal"
        shouldCloseOnEsc={true}
        shouldCloseOnOverlayClick={true}
        shouldFocusAfterRender={true}
        shouldReturnFocusAfterClose={true}
        style={
          Object {
            "overlay": Object {
              "zIndex": 10,
            },
          }
        }
      >
        <ModalPortal
          ariaHideApp={false}
          bodyOpenClassName="ReactModal__Body--open"
          closeTimeoutMS={0}
          contentLabel="Review Modal"
          defaultStyles={
            Object {
              "content": Object {
                "WebkitOverflowScrolling": "touch",
                "background": "#fff",
                "border": "1px solid #ccc",
                "borderRadius": "4px",
                "bottom": "40px",
                "left": "40px",
                "outline": "none",
                "overflow": "auto",
                "padding": "20px",
                "position": "absolute",
                "right": "40px",
                "top": "40px",
              },
              "overlay": Object {
                "backgroundColor": "rgba(255, 255, 255, 0.75)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
              },
            }
          }
          isOpen={true}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
          style={
            Object {
              "overlay": Object {
                "zIndex": 10,
              },
            }
          }
        >
          <div
            aria-modal="true"
            className="ReactModal__Overlay ReactModal__Overlay--after-open"
            onClick={[Function]}
            onMouseDown={[Function]}
            style={
              Object {
                "backgroundColor": "rgba(255, 255, 255, 0.75)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
                "zIndex": 10,
              }
            }
          >
            <div
              aria-label="Review Modal"
              className="ReactModal__Content ReactModal__Content--after-open"
              onClick={[Function]}
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              style={
                Object {
                  "WebkitOverflowScrolling": "touch",
                  "background": "#fff",
                  "border": "1px solid #ccc",
                  "borderRadius": "4px",
                  "bottom": "40px",
                  "left": "40px",
                  "outline": "none",
                  "overflow": "auto",
                  "padding": "20px",
                  "position": "absolute",
                  "right": "40px",
                  "top": "40px",
                }
              }
              tabIndex="-1"
            >
              <i
                className="fas fa-times"
                onClick={[Function]}
                style={
                  Object {
                    "cursor": "pointer",
                    "float": "right",
                  }
                }
              />
              <Connect(Alert)>
                <Alert
                  closeAlert={[Function]}
                  open={true}
                >
                  <div>
                    <div
                      className="alert alert-warning alert-dismissible fade show"
                      role="alert"
                    >
                      <strong>
                        Oops! Something went wrong!
                      </strong>
                       The action just failed. Please try again later.
                      <button
                        aria-label="Close"
                        className="close"
                        data-dismiss="alert"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          aria-hidden="true"
                        >
                          Ã—
                        </span>
                      </button>
                    </div>
                  </div>
                </Alert>
              </Connect(Alert)>
              <h3 />
              <dl>
                <dt>
                  <img
                    alt=""
                    className="img-thumbnail"
                    src=""
                  />
                </dt>
                <div>
                  <dt>
                    Author
                  </dt>
                  <dd />
                </div>
                <dt>
                  Publisher
                </dt>
                <dd />
                <dt>
                  Published
                </dt>
                <dd />
                <dd />
              </dl>
              <div>
                <table
                  className="table"
                >
                  <thead>
                    <tr>
                      <th
                        scope="col"
                      >
                        Owner
                      </th>
                      <th
                        scope="col"
                      >
                        Location
                      </th>
                      <th
                        scope="col"
                      />
                    </tr>
                  </thead>
                  <tbody />
                </table>
              </div>
            </div>
          </div>
        </ModalPortal>
      </Modal>
    </Modal>
  </Connect(Modal)>
</Provider>
`;

exports[`Modal Snapshot Snapshot of Modal for answer sender use 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Modal)>
    <Modal
      addBook={[Function]}
      addExchange={[Function]}
      addRequest={[Function]}
      btnuse="answersender"
      closeBook={[Function]}
      email={null}
      getUsersLocation={[Function]}
      info={
        Object {
          "authors": Array [],
          "bookId": "",
          "categories": Array [],
          "description": "",
          "imageUrl": "",
          "ownBy": Array [],
          "publishedDate": "",
          "publisher": "",
          "title": "",
        }
      }
      open={true}
      outrequests={Array []}
      ownedbooks={Array []}
      ownerslocation={Array []}
      removeBook={[Function]}
      tologin={false}
      username={null}
    >
      <Modal
        ariaHideApp={false}
        bodyOpenClassName="ReactModal__Body--open"
        closeTimeoutMS={0}
        contentLabel="Review Modal"
        isOpen={true}
        parentSelector={[Function]}
        portalClassName="ReactModalPortal"
        shouldCloseOnEsc={true}
        shouldCloseOnOverlayClick={true}
        shouldFocusAfterRender={true}
        shouldReturnFocusAfterClose={true}
        style={
          Object {
            "overlay": Object {
              "zIndex": 10,
            },
          }
        }
      >
        <ModalPortal
          ariaHideApp={false}
          bodyOpenClassName="ReactModal__Body--open"
          closeTimeoutMS={0}
          contentLabel="Review Modal"
          defaultStyles={
            Object {
              "content": Object {
                "WebkitOverflowScrolling": "touch",
                "background": "#fff",
                "border": "1px solid #ccc",
                "borderRadius": "4px",
                "bottom": "40px",
                "left": "40px",
                "outline": "none",
                "overflow": "auto",
                "padding": "20px",
                "position": "absolute",
                "right": "40px",
                "top": "40px",
              },
              "overlay": Object {
                "backgroundColor": "rgba(255, 255, 255, 0.75)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
              },
            }
          }
          isOpen={true}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
          style={
            Object {
              "overlay": Object {
                "zIndex": 10,
              },
            }
          }
        >
          <div
            aria-modal="true"
            className="ReactModal__Overlay ReactModal__Overlay--after-open"
            onClick={[Function]}
            onMouseDown={[Function]}
            style={
              Object {
                "backgroundColor": "rgba(255, 255, 255, 0.75)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
                "zIndex": 10,
              }
            }
          >
            <div
              aria-label="Review Modal"
              className="ReactModal__Content ReactModal__Content--after-open"
              onClick={[Function]}
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              style={
                Object {
                  "WebkitOverflowScrolling": "touch",
                  "background": "#fff",
                  "border": "1px solid #ccc",
                  "borderRadius": "4px",
                  "bottom": "40px",
                  "left": "40px",
                  "outline": "none",
                  "overflow": "auto",
                  "padding": "20px",
                  "position": "absolute",
                  "right": "40px",
                  "top": "40px",
                }
              }
              tabIndex="-1"
            >
              <i
                className="fas fa-times"
                onClick={[Function]}
                style={
                  Object {
                    "cursor": "pointer",
                    "float": "right",
                  }
                }
              />
              <Connect(Alert)>
                <Alert
                  closeAlert={[Function]}
                  open={true}
                >
                  <div>
                    <div
                      className="alert alert-warning alert-dismissible fade show"
                      role="alert"
                    >
                      <strong>
                        Oops! Something went wrong!
                      </strong>
                       The action just failed. Please try again later.
                      <button
                        aria-label="Close"
                        className="close"
                        data-dismiss="alert"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          aria-hidden="true"
                        >
                          Ã—
                        </span>
                      </button>
                    </div>
                  </div>
                </Alert>
              </Connect(Alert)>
              <h3 />
              <dl>
                <dt>
                  <img
                    alt=""
                    className="img-thumbnail"
                    src=""
                  />
                </dt>
                <div>
                  <dt>
                    Author
                  </dt>
                  <dd />
                </div>
                <dt>
                  Publisher
                </dt>
                <dd />
                <dt>
                  Published
                </dt>
                <dd />
                <dd />
              </dl>
              <button
                className="btn btn-raised bg-dark text-light"
                onClick={[Function]}
              >
                Exchange
              </button>
            </div>
          </div>
        </ModalPortal>
      </Modal>
    </Modal>
  </Connect(Modal)>
</Provider>
`;

exports[`Modal Snapshot Snapshot of Modal for remove book use 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Modal)>
    <Modal
      addBook={[Function]}
      addExchange={[Function]}
      addRequest={[Function]}
      btnuse="removebook"
      closeBook={[Function]}
      email={null}
      getUsersLocation={[Function]}
      info={
        Object {
          "authors": Array [],
          "bookId": "",
          "categories": Array [],
          "description": "",
          "imageUrl": "",
          "ownBy": Array [],
          "publishedDate": "",
          "publisher": "",
          "title": "",
        }
      }
      open={true}
      outrequests={Array []}
      ownedbooks={Array []}
      ownerslocation={Array []}
      removeBook={[Function]}
      tologin={false}
      username={null}
    >
      <Modal
        ariaHideApp={false}
        bodyOpenClassName="ReactModal__Body--open"
        closeTimeoutMS={0}
        contentLabel="Review Modal"
        isOpen={true}
        parentSelector={[Function]}
        portalClassName="ReactModalPortal"
        shouldCloseOnEsc={true}
        shouldCloseOnOverlayClick={true}
        shouldFocusAfterRender={true}
        shouldReturnFocusAfterClose={true}
        style={
          Object {
            "overlay": Object {
              "zIndex": 10,
            },
          }
        }
      >
        <ModalPortal
          ariaHideApp={false}
          bodyOpenClassName="ReactModal__Body--open"
          closeTimeoutMS={0}
          contentLabel="Review Modal"
          defaultStyles={
            Object {
              "content": Object {
                "WebkitOverflowScrolling": "touch",
                "background": "#fff",
                "border": "1px solid #ccc",
                "borderRadius": "4px",
                "bottom": "40px",
                "left": "40px",
                "outline": "none",
                "overflow": "auto",
                "padding": "20px",
                "position": "absolute",
                "right": "40px",
                "top": "40px",
              },
              "overlay": Object {
                "backgroundColor": "rgba(255, 255, 255, 0.75)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
              },
            }
          }
          isOpen={true}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
          style={
            Object {
              "overlay": Object {
                "zIndex": 10,
              },
            }
          }
        >
          <div
            aria-modal="true"
            className="ReactModal__Overlay ReactModal__Overlay--after-open"
            onClick={[Function]}
            onMouseDown={[Function]}
            style={
              Object {
                "backgroundColor": "rgba(255, 255, 255, 0.75)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
                "zIndex": 10,
              }
            }
          >
            <div
              aria-label="Review Modal"
              className="ReactModal__Content ReactModal__Content--after-open"
              onClick={[Function]}
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              style={
                Object {
                  "WebkitOverflowScrolling": "touch",
                  "background": "#fff",
                  "border": "1px solid #ccc",
                  "borderRadius": "4px",
                  "bottom": "40px",
                  "left": "40px",
                  "outline": "none",
                  "overflow": "auto",
                  "padding": "20px",
                  "position": "absolute",
                  "right": "40px",
                  "top": "40px",
                }
              }
              tabIndex="-1"
            >
              <i
                className="fas fa-times"
                onClick={[Function]}
                style={
                  Object {
                    "cursor": "pointer",
                    "float": "right",
                  }
                }
              />
              <Connect(Alert)>
                <Alert
                  closeAlert={[Function]}
                  open={true}
                >
                  <div>
                    <div
                      className="alert alert-warning alert-dismissible fade show"
                      role="alert"
                    >
                      <strong>
                        Oops! Something went wrong!
                      </strong>
                       The action just failed. Please try again later.
                      <button
                        aria-label="Close"
                        className="close"
                        data-dismiss="alert"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          aria-hidden="true"
                        >
                          Ã—
                        </span>
                      </button>
                    </div>
                  </div>
                </Alert>
              </Connect(Alert)>
              <h3 />
              <dl>
                <dt>
                  <img
                    alt=""
                    className="img-thumbnail"
                    src=""
                  />
                </dt>
                <div>
                  <dt>
                    Author
                  </dt>
                  <dd />
                </div>
                <dt>
                  Publisher
                </dt>
                <dd />
                <dt>
                  Published
                </dt>
                <dd />
                <dd />
              </dl>
              <button
                className="btn btn-raised bg-dark text-light"
                onClick={[Function]}
              >
                Remove from my books
              </button>
            </div>
          </div>
        </ModalPortal>
      </Modal>
    </Modal>
  </Connect(Modal)>
</Provider>
`;
